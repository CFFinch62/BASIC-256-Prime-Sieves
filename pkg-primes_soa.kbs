function primes_SoA(limit)
    Dim marked(limit + 1) fill false
    for x = 1 to (sqrt(limit) + 1)
        for y = 1 to (sqrt(limit) + 1)
            n = (4 * (x*x)) + (y*y)
            if (n <= limit) and ((n mod 12 = 1) or (n mod 12 = 5)) then 
                marked[n] = not marked[n]
            end if
            n = (3 * (x*x)) + (y*y)
            if (n <= limit) and (n mod 12 = 7) then
                marked[n] = not marked[n]
            end if
            n = (3 * (x*x)) - (y*y)
            if (x > y) and (n <= limit) and (n mod 12 = 11) then
                marked[n] = not marked[n]
            end if
        next y
     next x   
     for n = 5 to (sqrt(limit) + 1)
         if marked[n] = true then
             k = 1
             while k * (n*n) <= limit
                 marked[k * (n*n)] = false
                 k = k + 1
             end while
         end if
     next n       
    cnt = 0 
    for i = 4 to limit
        if marked[i] = true then
			cnt = cnt + 1
    	end if
    next i           
    Dim primes(cnt + 2)
    primes[0] = 2
    primes[1] = 3
    c = 2
    for i = 4 to limit
        if marked[i] = true then
            primes[c] = i
            c = c + 1
        end if   
    next i       
    return primes    
end function